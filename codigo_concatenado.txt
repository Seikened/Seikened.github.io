--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/tailwind.config.js ---
const plugin = require('tailwindcss/plugin');

module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}', 
    './public/index.html'
  ],
  theme: {
    extend: {
      colors: {
        primary: '#FEF3E2',  // Blanco crema
        secondary: '#2E2E2E', // Gris mate
        tertiary: '#DE58D2' // Rosado
      },
    },
  },
  plugins: [
    plugin(function({ addBase, theme }) {
      addBase({
        ':root': {
          '--color-primary': theme('colors.primary'),
          '--color-secondary': theme('colors.secondary'),
          '--color-tertiary': theme('colors.tertiary'),
        },
      });
    }),
  ],
}

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/tailwind.config.js ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/index.tsx ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import Blog from './pages/Blog';
import Portfolio from './pages/Portfolio';
import About from './pages/About';
import { DayNightProvider } from './components/DayNightContext';

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);

root.render(
  <React.StrictMode>
    <DayNightProvider>
      <Router basename={process.env.PUBLIC_URL}>
        <Routes>
          <Route path="/" element={<App />} />
          <Route path="/blog/*" element={<Blog />} />
          <Route path="/portfolio" element={<Portfolio />} />
          <Route path="/about" element={<About />} />
        </Routes>
      </Router>
    </DayNightProvider>
  </React.StrictMode>
);

reportWebVitals();

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/index.tsx ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Importar la fuente Cascadia Code */
@font-face {
  font-family: 'Cascadia Code';
  src: url('../public/fonts/CascadiaCode.woff2') format('woff2'),
       url('../public/fonts/CascadiaCodeItalic.woff2') format('woff2'),
       url('../public/fonts/CascadiaCodeNF.woff2') format('woff2'),
       url('../public/fonts/CascadiaCodeNFItalic.woff2') format('woff2'),
       url('../public/fonts/CascadiaCodePL.woff2') format('woff2'),
       url('../public/fonts/CascadiaCodePLItalic.woff2') format('woff2'),
       url('../public/fonts/CascadiaMono.woff2') format('woff2'),
       url('../public/fonts/CascadiaMonoItalic.woff2') format('woff2'),
       url('../public/fonts/CascadiaMonoNF.woff2') format('woff2'),
       url('../public/fonts/CascadiaMonoNFItalic.woff2') format('woff2'),
       url('../public/fonts/CascadiaMonoPL.woff2') format('woff2'),
       url('../public/fonts/CascadiaMonoPLItalic.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
}

body {
  margin: 0;
  font-family: 'Cascadia Code', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: 'Cascadia Code', source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Clase para fijar el ancho de la fecha */
.fixed-width {
  min-width: 5.9rem; /* Ajusta el valor según sea necesario */
  text-align: right;
  white-space: nowrap;
}

/* Efecto de transición del borde y del texto */
.sidebar-item {
  position: relative;
  overflow: hidden;
}

.sidebar-item::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 0; /* Comienza con un ancho de 0 */
  height: 100%;
  background-color: var(--color-tertiary); /* Usamos la variable CSS */
  transition: width 0.3s ease-in-out; /* Transición del ancho */
}

.sidebar-item:hover::before {
  width: 5px; /* Expande a 5px cuando se hace hover */
}

.sidebar-text {
  position: relative;
  display: inline-block;
  background: linear-gradient(to left, currentColor 50%, var(--color-tertiary) 50%);
  background-size: 200% 100%;
  background-position: 100%;
  transition: background-position 0.3s ease-in-out;
  color: currentColor;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.sidebar-item:hover .sidebar-text {
  background-position: 0;
  /* NOTA: Eliminado el text-fill-color para evitar interferencias */
}

/* Selected item */
.selected-sidebar-item {
  border-left: 4px solid var(--color-tertiary); /* Mantenemos el borde izquierdo en color terciario */
  background-color: rgba(222, 88, 210, 0.1); /* Un fondo ligeramente diferente para el post seleccionado */
}

.selected-sidebar-text {
  background: linear-gradient(to left, var(--color-tertiary) 50%, var(--color-tertiary) 50%);
  background-size: 200% 100%;
  background-position: 100%;
  transition: background-position 0.3s ease-in-out;

}

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/index.css ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/components/Sidebar.tsx ---
import React from 'react';
import { Link, useLocation } from 'react-router-dom';
import { format, parseISO } from 'date-fns';

const postFiles = require.context('../posts', true, /\.tsx$/);

const posts = postFiles.keys().map(path => {
  const module = postFiles(path).default;
  
  const metadata = module.metadata;

  return {
    name: path.match(/\/([^/]+)\.tsx$/)?.[1]?.toLowerCase(),
    displayName: metadata?.title || 'Sin título',
    date: metadata?.date || 'Sin fecha',
    dateObj: parseISO(metadata?.date), // Convertimos la fecha en objeto Date
  };
})
.sort((a, b) => a.dateObj.getTime() - b.dateObj.getTime()) // Ordenamos por fecha ascendente para asignar IDs correctamente
.map((post, index) => ({
  ...post,
  id: index + 1, // Asignamos un ID incremental basado en el orden ascendente
  formattedDate: format(post.dateObj, 'dd-MM-yyyy'), // Formateamos la fecha para mostrarla como DD-MM-YYYY
}))
.sort((a, b) => b.dateObj.getTime() - a.dateObj.getTime()); // Ordenamos por fecha descendente para mostrar en el orden correcto

const Sidebar: React.FC<{ isDay: boolean }> = ({ isDay }) => {
  const location = useLocation(); // Usamos useLocation para obtener la ruta actual

  return (
    <div className={`p-4 ${isDay ? 'bg-primary border-secondary' : 'bg-secondary border-primary'} h-full border-r-2`}>
      {posts.map(post => {
        const isSelected = post.name ? location.pathname.includes(post.name) : false; // Verificamos si la ruta actual incluye el nombre del post
        return (
          <div 
            key={post.name} 
            className={`flex justify-between items-center mb-2 p-2 ${isDay ? 'bg-secondary' : 'bg-primary'} rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 hover:border-l-4 hover:border-tertiary group sidebar-item ${isSelected ? 'selected-sidebar-item' : ''}`}
          >
            <Link 
              to={`/blog/${post.name}`} 
              className={`flex-grow font-semibold truncate transition duration-300 ease-in-out
                          ${isSelected ? (!isDay ? 'text-primary' : 'text-secondary') : (isDay ? 'text-primary' : 'text-secondary')}`}
            >
              <span className="block w-full overflow-hidden whitespace-nowrap overflow-ellipsis fade-out sidebar-text">
                {`#${post.id} - ${post.displayName}`}
              </span>
            </Link>
            <span className={`text-sm ${isSelected ? (!isDay ? 'text-gray-400' : 'text-gray-700') : (isDay ? 'text-gray-400' : 'text-gray-700')} ml-2 fixed-width`}>
              {post.formattedDate}
            </span>

          </div>
        );
      })}
    </div>
  );
};

export default Sidebar;

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/components/Sidebar.tsx ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/pages/Blog.tsx ---
import React, { useContext } from 'react';
import { useLocation } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import { DayNightContext } from '../components/DayNightContext';

const postFiles = require.context('../posts', true, /\.tsx$/);

const componentsMap: { [key: string]: React.FC & { metadata?: { title: string, date: string } } } = postFiles.keys().reduce((map, path) => {
  const name = path.match(/\/([^/]+)\.tsx$/)?.[1]?.toLowerCase();
  if (name) {
    map[name] = postFiles(path).default;
  }
  return map;
}, {} as { [key: string]: React.FC & { metadata?: { title: string, date: string } } });

const Blog: React.FC = () => {
  const location = useLocation();
  const path = location.pathname.split("/").pop()?.toLowerCase();
  const { isDay } = useContext(DayNightContext);

  const PostComponent = path ? componentsMap[path] : null;

  return (
    <div className={`flex min-h-screen ${isDay ? 'bg-primary' : 'bg-secondary'}`}>
      <div className="w-1/4 relative">
        <Sidebar isDay={isDay} />
      </div>
      <div className="flex-1 p-8">
        {PostComponent ? (
          <PostComponent />
        ) : (
          <div className="flex items-center justify-center h-full">
            <p className={`text-3xl font-semibold text-center ${isDay ? 'text-secondary' : 'text-primary'}`}>
              Selecciona un post para leer
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Blog;

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/Seikened.github.io/src/pages/Blog.tsx ---

