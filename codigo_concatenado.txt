--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/tailwind.config.js ---
module.exports = {
  content: [
    './src/**/*.{js,jsx,ts,tsx}', 
    './public/index.html'
  ],
  theme: {
    extend: {
      colors: {
        primary: '#FEF3E2',  // Blanco crema
        secondary: '#2E2E2E', // Gris mate
        tertiary: '#DE58D2' // Rosado
      },
    },
  },
  plugins: [],
}

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/tailwind.config.js ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/App.tsx ---
import React, { useState, useEffect } from 'react';
import LandingPage from './pages/LandingPage';
import './Switch.css'; // Importa el archivo CSS personalizado

// const fullConfig = resolveConfig(tailwindConfig);
// const themeColors = fullConfig.theme.colors;

const Switch: React.FC<{ isOn: boolean, handleToggle: () => void }> = ({ isOn, handleToggle }) => {
  return (
    <div
      className={`switch ${isOn ? 'switch-on' : 'switch-off'} absolute top-2 left-2`} // Posici√≥n absoluta para el switch
      onClick={handleToggle}
    >
      <div className="switch-handle" />
    </div>
  );
};

// Componente principal de la aplicaci√≥n
const App: React.FC = () => {
  const [isDay, setIsDay] = useState(true);

  // Efecto que determina si es de d√≠a o de noche basado en la hora actual
  useEffect(() => {
    const hour = new Date().getHours();
    setIsDay(hour >= 6 && hour < 18);
  }, []);

  // Configuraci√≥n de colores seg√∫n el d√≠a o la noche
  const colors = {
    primary: isDay ? '#FEF3E2' : '#2E2E2E', // Usa valores de color directamente
    secondary: isDay ? '#2E2E2E' : '#FEF3E2',
    tertiary: '#DE58D2',
  };

  // Funci√≥n para alternar entre d√≠a y noche
  const toggleDayNight = () => {
    setIsDay((prev) => !prev);
  };

  return (
    <div className="min-h-screen flex flex-col justify-center items-center" style={{ backgroundColor: colors.primary, color: colors.secondary }}>
      <Switch isOn={isDay} handleToggle={toggleDayNight} />
      <h1 className={`text-2xl font-semibold mb-4`} style={{ color: 'var(--tw-color-primary)' }}>
        {isDay ? 'Buenos D√≠as ‚òÄÔ∏è' : 'Buenas noches üåô'}
      </h1>

      <LandingPage
        nodeColor={colors.secondary}
        linkColor={colors.secondary}
        hoverColor={colors.tertiary}
        textOpacity={0.20}
        isDay={isDay}
      />
    </div>
  );
};

export default App;

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/App.tsx ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/App.test.tsx ---
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/App.test.tsx ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/App.css ---

--- Inicio del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/components/PhysicsGraph.tsx ---
import React, { useRef, useEffect } from 'react';
// Importa React y los hooks useRef y useEffect

import * as d3 from 'd3';
// Importa toda la biblioteca d3

// Comenta las importaciones no necesarias
// import resolveConfig from 'tailwindcss/resolveConfig';
// import tailwindConfig from '../../tailwind.config.js';

// interface para Node y Link
interface Node extends d3.SimulationNodeDatum {
  id: string;
  url?: string;
  color?: string;
  radius?: number;
  label?: string;
}

interface Link extends d3.SimulationLinkDatum<Node> {
  source: string | Node;
  target: string | Node;
}

interface PhysicsGraphProps {
  nodes: Node[];
  links: Link[];
  centralNodeId: string;
  nodeColor?: string;
  linkColor?: string;
  hoverColor?: string;
  textOpacity?: number;
  isDay: boolean;
}

// Comenta las resoluciones de configuraci√≥n no necesarias
// const fullConfig = resolveConfig(tailwindConfig);
// const themeColors = fullConfig.theme.colors;

const PhysicsGraph: React.FC<PhysicsGraphProps> = ({
  nodes,
  links,
  centralNodeId,
  nodeColor = 'fill-primary', // Usa las clases de Tailwind directamente
  linkColor = 'stroke-primary', // Usa las clases de Tailwind directamente
  hoverColor = 'stroke-tertiary', // Usa las clases de Tailwind directamente
  textOpacity = 0.15,
  isDay,
}) => {
  const svgRef = useRef<SVGSVGElement>(null);
  // Crea una referencia para el elemento SVG

  useEffect(() => {
    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove(); // Limpia el contenido SVG previo

    const width = window.innerWidth;
    const height = window.innerHeight;
    // Define el ancho y alto del SVG basado en el tama√±o de la ventana

    const simulation = d3.forceSimulation(nodes as d3.SimulationNodeDatum[])
      .force('link', d3.forceLink(links).id((d: any) => d.id).distance(200))
      .force('charge', d3.forceManyBody().strength(-500))
      .force('center', d3.forceCenter(width / 2, height / 2));
    // Configura la simulaci√≥n de fuerzas de D3 para los nodos y enlaces

    const link = svg.append('g')
      .attr('class', 'links')
      .selectAll('line')
      .data(links)
      .enter()
      .append('line')
      .attr('stroke', linkColor);
    // Agrega enlaces (l√≠neas) al SVG y les asigna un color

    const node = svg.append('g')
      .attr('class', 'nodes')
      .selectAll('circle')
      .data(nodes)
      .enter()
      .append('circle')
      .attr('r', (d: any) => d.radius || (d.id === centralNodeId ? 30 : 20))
      .attr('fill', (d: any) => d.color || nodeColor)
      // Agrega nodos (c√≠rculos) al SVG y les asigna un radio y color

      // Define el comportamiento al pasar el mouse sobre un nodo (hover)
      .on('mouseover', function (event, d) {
        // Selecciona el nodo actual y cambia su borde al color de hover y ancho de borde a 3
        d3.select(this).attr('stroke', hoverColor).attr('stroke-width', 3);
        
        // Selecciona el texto asociado al nodo actual y cambia su opacidad a 1 (completamente visible)
        d3.select(`#text-${d.id}`).attr('opacity', 1);

        // Selecciona todas las l√≠neas de enlace
        d3.selectAll('.links line')
          // Cambia el color de todas las l√≠neas al color de hover
          .attr('stroke', hoverColor);

        // Selecciona todos los nodos y filtra aquellos que no son el nodo actual
        d3.selectAll('circle')
          .filter((n: any) => n.id !== d.id)
          // Cambia el color de relleno de los nodos no seleccionados al color de hover
          .attr('fill', hoverColor)
          // Cambia la opacidad de los nodos no seleccionados a 1 (completamente visible)
          .attr('opacity', 1);

        // Selecciona todos los textos y filtra aquellos que no est√°n asociados al nodo actual
        d3.selectAll('text')
          .filter((n: any) => n.id !== d.id)
          // Cambia la opacidad de los textos no seleccionados a 0 (invisible)
          .attr('opacity', 0);
      })


      // Define el comportamiento al quitar el mouse de un nodo
      .on('mouseout', function (event, d) {
        // Restaura el borde del nodo actual (elimina el color y el ancho del borde)
        d3.select(this).attr('stroke', null);
        
        // Restaura la opacidad del texto asociado al nodo actual a su valor original
        d3.select(`#text-${d.id}`).attr('opacity', textOpacity);

        // Selecciona todas las l√≠neas de enlace y filtra aquellas que est√°n conectadas al nodo actual
        d3.selectAll('.links line')

          // Restaura el color de las l√≠neas conectadas al nodo actual al color original
          .attr('stroke', linkColor);

        // Selecciona todos los nodos y filtra aquellos que no son el nodo actual
        d3.selectAll('circle')
          .filter((n: any) => n.id !== d.id)
          // Restaura el color de relleno de los nodos no seleccionados a su color original
          .attr('fill', (n: any) => n.color || nodeColor)
          // Restaura la opacidad de los nodos no seleccionados a 1 (completamente visible)
          .attr('opacity', 1);

        // Selecciona todos los textos y filtra aquellos que no est√°n asociados al nodo actual
        d3.selectAll('text')
          .filter((n: any) => n.id !== d.id)
          // Restaura la opacidad de los textos no seleccionados a su valor original
          .attr('opacity', textOpacity);
      })

      // Define el comportamiento al hacer clic en un nodo
      .on('click', function (event, d: any) {
        // Si el nodo tiene una URL asociada, redirige el navegador a esa URL
        if (d.url) window.location.href = d.url;
      })

      // Configura el comportamiento de arrastrar (drag) para los nodos
      .call(d3.drag<SVGCircleElement, Node>()
        // Define el comportamiento al iniciar el arrastre de un nodo
        .on('start', (event: any, d: Node) => dragstarted(event, d))
        // Define el comportamiento al arrastrar un nodo
        .on('drag', (event: any, d: Node) => dragged(event, d))
        // Define el comportamiento al finalizar el arrastre de un nodo
        .on('end', (event: any, d: Node) => dragended(event, d))
      );


      const text = svg.append('g')
      .attr('class', 'texts')
      .selectAll('text')
      .data(nodes)
      .enter()
      .append('text')
      .attr('id', (d: any) => `text-${d.id}`)
      .attr('dx', (d: any) => {
        const offset = d.radius || (d.id === centralNodeId ? 30 : 20);
        return offset + 5;
      }) // Posiciona el texto de manera proporcional al tama√±o del nodo
      .attr('dy', 4)
      .attr('opacity', textOpacity)
      .attr('class', 'text-lg font-bold fill-current')  // Usar fill-current para heredar el color del padre
      .attr('fill', isDay ? 'text-primary' : 'text-secondary')  // Asegurarse de aplicar el color correcto
      .text((d: any) => d.label || d.id)
      .on('click', function (event, d: any) {
        if (d.url) window.location.href = d.url;
      });
      // Agrega y configura el texto de cada nodo

    simulation.on('tick', () => {
      link
        .attr('x1', (d: any) => (d.source as any).x)
        .attr('y1', (d: any) => (d.source as any).y)
        .attr('x2', (d: any) => (d.target as any).x)
        .attr('y2', (d: any) => (d.target as any).y);

      node
        .attr('cx', (d: any) => d.x)
        .attr('cy', (d: any) => d.y);

      text
        .attr('x', (d: any) => d.x)
        .attr('y', (d: any) => d.y);
    });
    // Define c√≥mo deben actualizarse los enlaces, nodos y textos en cada tick de la simulaci√≥n

    // Movimiento oscilante
    d3.interval(() => {
      nodes.forEach((node) => {
        node.x! += Math.sin(Date.now() / 1000) * 2;
        node.y! += Math.cos(Date.now() / 1000) * 2;
      });
      simulation.alpha(0.3).restart();
    }, 100);
    // Agrega un movimiento oscilante a los nodos

    function dragstarted(event: any, d: Node) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }
    // Funci√≥n para manejar el inicio del arrastre de un nodo

    function dragged(event: any, d: Node) {
      d.fx = event.x;
      d.fy = event.y;
    }
    // Funci√≥n para manejar el arrastre de un nodo

    function dragended(event: any, d: Node) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
    // Funci√≥n para manejar el final del arrastre de un nodo

  }, [nodes, links, centralNodeId, nodeColor, linkColor, hoverColor, textOpacity, isDay]);
  // useEffect para actualizar la simulaci√≥n cuando cambian los nodos, enlaces o colores

  return (
    <svg ref={svgRef} width="100%" height="100vh" style={{ backgroundColor: 'transparent' }}>
      <g className="nodes"></g>
      <g className="links"></g>
    </svg>
  );
  // Renderiza el SVG con las referencias a los nodos y enlaces
};

export default PhysicsGraph;
// Exporta el componente PhysicsGraph como predeterminado

--- Fin del archivo: /Users/fernandoleonfranco/Documents/GitHub/seiken/src/components/PhysicsGraph.tsx ---

